from typing import Dict, List

from common.models.subscription_offer import SubscriptionOfferDevicesType
from handlers.process_subscription import DeviceFields, Fields

MonthLocale = {
    1: '–º–µ—Å—è—Ü',
    2: '–º–µ—Å—è—Ü–∞',
    3: '–º–µ—Å—è—Ü–∞',
    4: '–º–µ—Å—è—Ü–∞',
    5: '–º–µ—Å—è—Ü–µ–≤',
    6: '–º–µ—Å—è—Ü–µ–≤',
    7: '–º–µ—Å—è—Ü–µ–≤',
    8: '–º–µ—Å—è—Ü–µ–≤',
    9: '–º–µ—Å—è—Ü–µ–≤',
    10: '–º–µ—Å—è—Ü–µ–≤',
    11: '–º–µ—Å—è—Ü–µ–≤',
    12: '–º–µ—Å—è—Ü–µ–≤'
}


NumberEmoji = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
    10: 'üîü'

}
DeviceLocale = {
    SubscriptionOfferDevicesType.ONE: '1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    SubscriptionOfferDevicesType.TWO: '2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    SubscriptionOfferDevicesType.THREE: '3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
    SubscriptionOfferDevicesType.FOUR_OR_MORE: '4 –∏ –±–æ–ª–µ–µ',
}


CurrencyLocale = {
    'RUB': '‚ÇΩ'
}


def get_device_locale(device_type: SubscriptionOfferDevicesType,  price, discount, currency: str) -> str:
    return '%s: %s %s (–¥–µ—à–µ–≤–ª–µ –Ω–∞ %s)' % (DeviceLocale[device_type], price, CurrencyLocale[currency], str(discount) + '%')


def get_month_text(m_count):
    return '%s %s' % (m_count, MonthLocale[m_count])


def get_tariff_str(month_duration, devices_number, price, currency, discount):
    result_price = price * (100 - discount) / 100

    return f"üóì {month_duration} {MonthLocale[month_duration]} üì±{devices_number}: " \
           f"{result_price} {CurrencyLocale[currency]} (–¥–µ—à–µ–≤–ª–µ –Ω–∞ {discount}%)"


def get_result_price(total_price, actually_price, currency):
    s = f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {total_price} {CurrencyLocale[currency]}"
    if total_price and total_price != 0:
        s += f" (–±–µ–∑ —Å–∫–∏–¥–æ–∫ {actually_price} {CurrencyLocale[currency]})"
    return s


def get_device_configuration(index, country, protocol, device_price, currency):
    country_str = '<i>–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</i>'
    wireguard_str = '<i>–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª</i>'
    if country:
        country_str = f"üó∫ {country['country']}"
        if country['discount_percentage'] != 0:
            country_str += f" (–¥–µ—à–µ–≤–ª–µ –Ω–∞ {country['discount_percentage']}%)"

    if protocol:
        wireguard_str = protocol['protocol']

    total_price_str = ''
    if protocol and country:
        total_price_str = f" ‚Äî {device_price} {CurrencyLocale[currency]}"

    return f"{NumberEmoji[index + 1]} {country_str} ¬∑ {wireguard_str}{total_price_str}"


def get_device_by_index(devices: [], index):
    return (device for device in devices if device.get(DeviceFields.DeviceIndex, None) == index)


def group_subscription_offers_by_month(subscriptions_offers: List[dict]) -> Dict[int, List[dict]]:
    grouped_subs: Dict[int, List[dict]] = {}

    for idx, offer in enumerate(subscriptions_offers):
        offers = grouped_subs.setdefault(offer['duration']['month_duration'], [])
        offers.append(subscriptions_offers[idx])

    return grouped_subs


def is_all_devices_meet_condition(devices: dict, devices_number: int):
    return devices \
           and len(devices) >= devices_number \
           and all(device for device in devices if is_device_configured(device))


def is_device_configured(device: dict):
    if device.get(DeviceFields.DeviceIndex, None) \
            and device.get(DeviceFields.SelectedCountryPk, None) \
            and device.get(DeviceFields.SelectedProtocolPk, None):
        return True
    else:
        return False

